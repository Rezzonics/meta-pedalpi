From 075177f0cd51385488333f852ec54955d86c5678 Mon Sep 17 00:00:00 2001
From: rezzonics <delacruz@Piloto2.localdomain>
Date: Wed, 9 Dec 2020 22:08:13 +0100
Subject: [PATCH] mod-ui updated with patches on host.py and webserver.py

---
 mod/host.py      | 70 +++++++++++++++++++++++++++++++++---------------
 mod/webserver.py | 12 ++++++---
 2 files changed, 56 insertions(+), 26 deletions(-)

diff --git a/mod/host.py b/mod/host.py
index ad10805c..54a8320f 100644
--- a/mod/host.py
+++ b/mod/host.py
@@ -868,7 +868,7 @@ class Host(object):
     @gen.coroutine
     def init_host(self):
         self.init_jack()
-        self.open_connection_if_needed(None)
+        #self.open_connection_if_needed(None)
 
         # Disable plugin processing while initializing
         yield gen.Task(self.send_notmodified, "feature_enable processing 0", datatype='boolean')
@@ -981,6 +981,12 @@ class Host(object):
             self.report_current_state(websocket)
             return
 
+        if self.readsock is None or self.writesock is None:
+            self._idle = False
+            #self.open_host_connection(websocket)
+
+        #def open_host_connection(self, websocket):
+
         def reader_check_response():
             self.process_read_queue()
 
@@ -998,34 +1004,45 @@ class Host(object):
             else:
                 self._idle = True
 
-        self._idle = False
-        self._queue = []
-
-        # Main socket, used for sending messages
-        self.writesock = iostream.IOStream(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
-        self.writesock.set_close_callback(self.writer_connection_closed)
-        self.writesock.set_nodelay(True)
-        self.writesock.connect(self.addr, writer_check_response)
+        if self.writesock is None:
+            try:
+                # Main socket, used for sending messages
+                logging.info( "Main socket, used for sending messages to address: " + str(self.addr))
+                self.writesock = iostream.IOStream(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
+                self.writesock.set_close_callback(self.writer_connection_closed)
+                self.writesock.set_nodelay(True)
+                self.writesock.connect(self.addr, writer_check_response)
+            except Exception as error:
+                logging.exception(error)
+                self.writer_connection_closed()
 
-        # Extra socket, used for receiving messages
-        self.readsock = iostream.IOStream(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
-        self.readsock.set_close_callback(self.reader_connection_closed)
-        self.readsock.set_nodelay(True)
-        self.readsock.connect((self.addr[0], self.addr[1]+1), reader_check_response)
+        if self.readsock is None:
+            try:
+                # Extra socket, used for receiving messages
+                logging.info( "Extra socket, used for receiving messages from address: " + str(self.addr))
+                self.readsock = iostream.IOStream(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
+                self.readsock.set_close_callback(self.reader_connection_closed)
+                self.readsock.set_nodelay(True)
+                self.readsock.connect((self.addr[0], self.addr[1]), reader_check_response)
+            except Exception as error:
+                logging.exception(error)
+                self.reader_connection_closed()
 
     def reader_connection_closed(self):
         self.readsock = None
+        logging.error("Reader connection is closed to address: " + str(self.addr));
 
     def writer_connection_closed(self):
         self.writesock = None
-        self.crashed = True
-        self.connected = False
-        self.statstimer.stop()
+        #self.crashed = True
+        #self.connected = False
+        #self.statstimer.stop()
 
-        if self.memtimer is not None:
-            self.memtimer.stop()
+        #if self.memtimer is not None:
+        #    self.memtimer.stop()
 
-        self.msg_callback("stop")
+        #self.msg_callback("stop")
+        logging.error("Writer connection is closed to address: " + str(self.addr));
 
         while True:
             try:
@@ -1577,8 +1594,15 @@ class Host(object):
         logging.debug("[host] sending -> %s", msg)
 
         encmsg = "%s\0" % str(msg)
-        self.writesock.write(encmsg.encode("utf-8"))
-        self.writesock.read_until(b"\0", check_response)
+        try:
+            self.writesock.write(encmsg.encode("utf-8"))
+            self.writesock.read_until(b"\0", check_response)
+        except Exception as error:
+            socket = self.writesock
+            self.writesock = None
+            logging.exception(error)
+            logging.error("Close writesock")
+            socket.close()
 
     # send data to host, set modified flag to true
     def send_modified(self, msg, callback=None, datatype='int'):
@@ -4553,6 +4577,7 @@ _:b%i
 
         if bank_id < 0 or bank_id > len(self.banks):
             print("ERROR: Trying to load pedalboard using out of bounds bank id %i" % (bank_id))
+            logging.error("Trying to load pedalboard using out of bounds bank id %i len=%i" % (bank_id, len(self.banks)))
             callback(False)
             return
 
@@ -4577,6 +4602,7 @@ _:b%i
 
         if pedalboard_id < 0 or pedalboard_id >= len(pedalboards):
             print("ERROR: Trying to load pedalboard using out of bounds pedalboard id %i" % (pedalboard_id))
+            logging.error("Trying to load pedalboard using out of bounds pedalboard id %i len=%i" % (pedalboard_id, len(pedalboards)))
             callback(False)
             return
 
diff --git a/mod/webserver.py b/mod/webserver.py
index c644bfee..57e8ca8a 100644
--- a/mod/webserver.py
+++ b/mod/webserver.py
@@ -2306,10 +2306,14 @@ def prepare(isModApp = False):
             if SESSION.host.writesock is None:
                 print("Writesock none")
 
-            print("Host failed to initialize, is the backend running?")
-            SESSION.host.close_jack()
-            if not isModApp:
-                sys.exit(1)
+            #print("Host failed to initialize, is the backend running?")
+            logging.error("Host failed to initialize, is the backend running? Retry...")
+            SESSION.host.open_connection_if_needed(None)
+            ioinstance.call_later(3.0, checkhost)
+
+            #SESSION.host.close_jack()
+            #if not isModApp:
+            #    sys.exit(1)
 
         elif not SESSION.host.connected:
             ioinstance.call_later(0.2, checkhost)
